// Generated by https://quicktype.io
export interface RSSDto {
  channel: ChannelDto;
}

export interface ChannelDto {
  title: string;
  description: string;
  generator: string;
  lastBuildDate: string;
  copyright: string;
  language: string;
  'itunes:subtitle': string;
  'itunes:explicit': ItunesExplicitDto;
  'itunes:author': ItunesAuthorDto;
  link: string;
  'itunes:owner': ItunesOwnerDto;
  'itunes:image': ItunesImageClassDto;
  'itunes:category': ChannelItunesCategoryDto;
  item: EpisodeDto[];
}

export interface EpisodeDto {
  title: string;
  description: string;
  guid: string;
  pubDate: string;
  link: string;
  'itunes:explicit': ItunesExplicitDto;
  'itunes:duration': string;
  'dc:creator': ItunesAuthorDto;
  'itunes:image': ItunesImageClassDto;
  enclosure: EnclosureDto;
}

export enum ItunesAuthorDto {
  BarstoolSports = 'Barstool Sports'
}

export interface EnclosureDto {
  $: EnclosureClassDto;
}

export interface EnclosureClassDto {
  url: string;
  length: string;
  type: AudioType;
}

export enum AudioType {
  AudioMPEG = 'audio/mpeg'
}

export enum ItunesExplicitDto {
  Yes = 'yes'
}

export interface ItunesImageClassDto {
  $: ItunesImageDto;
}

export interface ItunesImageDto {
  href: string;
}

export interface ChannelItunesCategoryDto {
  $: ItunesCategoryDto;
  'itunes:category': ItunesCategoryItunesCategoryDto;
}

export interface ItunesCategoryDto {
  text: string;
}

export interface ItunesCategoryItunesCategoryDto {
  $: ItunesCategoryDto;
}

export interface ItunesOwnerDto {
  'itunes:name': ItunesAuthorDto;
  'itunes:email': string;
}

export interface PodcastDto {
  wrapperType: string;
  kind: string;
  collectionId: number;
  trackId: number;
  artistName: string;
  collectionName: string;
  trackName: string;
  collectionCensoredName: string;
  trackCensoredName: string;
  collectionViewUrl: string;
  feedUrl: string;
  trackViewUrl: string;
  artworkUrl30: string;
  artworkUrl60: string;
  artworkUrl100: string;
  collectionPrice: number;
  trackPrice: number;
  collectionHdPrice: number;
  releaseDate: string;
  collectionExplicitness: string;
  trackExplicitness: string;
  trackCount: number;
  trackTimeMillis: number;
  country: string;
  currency: string;
  primaryGenreName: string;
  artworkUrl600: string;
  genreIds: string[];
  genres: string[];
}

export interface FeedDto {
  author: AuthorDto;
  entry: EntryDto[];
  updated: IconDto;
  rights: IconDto;
  title: IconDto;
  icon: IconDto;
  link: LinkDto[];
  id: IconDto;
}

export interface AuthorDto {
  name: IconDto;
  uri: IconDto;
}

export interface IconDto {
  label: string;
}

export interface EntryDto {
  'im:name': IconDto;
  'im:image': IMImageDto[];
  summary: IconDto;
  'im:price': IMPriceDto;
  'im:contentType': IMContentTypeDto;
  rights?: IconDto;
  title: IconDto;
  link: LinkDto;
  id: IDDto;
  'im:artist': IMArtistDto;
  category: CategoryDto;
  'im:releaseDate': IMReleaseDateDto;
}

export interface CategoryDto {
  attributes: CategoryAttributesDto;
}

export interface CategoryAttributesDto {
  'im:id': string;
  term: CategoryTypeDto;
  scheme: string;
  label: CategoryTypeDto;
}

export enum CategoryTypeDto {
  Music = 'Music',
  MusicCommentary = 'Music Commentary',
  MusicHistory = 'Music History',
  MusicInterviews = 'Music Interviews'
}

export interface IDDto {
  label: string;
  attributes: IDAttributesDto;
}

export interface IDAttributesDto {
  'im:id': string;
}

export interface IMArtistDto {
  label: string;
  attributes?: IMArtistAttributesDto;
}

export interface IMArtistAttributesDto {
  href: string;
}

export interface IMContentTypeDto {
  attributes: IMContentTypeAttributesDto;
}

export interface IMContentTypeAttributesDto {
  term: ContentTypeDto;
  label: ContentTypeDto;
}

export enum ContentTypeDto {
  Podcast = 'Podcast'
}

export interface IMImageDto {
  label: string;
  attributes: IMImageAttributesDto;
}

export interface IMImageAttributesDto {
  height: string;
}

export interface IMPriceDto {
  label: IMPriceLabelDto;
  attributes: IMPriceAttributesDto;
}

export interface IMPriceAttributesDto {
  amount: string;
  currency: CurrencyDto;
}

export enum CurrencyDto {
  Usd = 'USD'
}

export enum IMPriceLabelDto {
  Get = 'Get'
}

export interface IMReleaseDateDto {
  label: string;
  attributes: IconDto;
}

export interface LinkDto {
  attributes: LinkAttributesDto;
}

export interface LinkAttributesDto {
  rel: LinkRelDto;
  type?: LinkTypeDto;
  href: string;
}

export enum LinkRelDto {
  Alternate = 'alternate',
  Self = 'self'
}

export enum LinkTypeDto {
  TextHTML = 'text/html'
}
